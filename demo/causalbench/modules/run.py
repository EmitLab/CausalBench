import logging

from causalbench.commons.utils import package_module
from causalbench.modules.module import Module
from causalbench.services.requests import save_module


class Run(Module):

    def __init__(self, module_id: int = None):
        super().__init__(module_id, None, None)

    def validate(self):
        # TODO: To be implemented
        pass

    def fetch(self) -> str:
        # TODO: To be implemented
        pass

    def save(self, state: dict, public: bool) -> bool:
        # if state.context.id is None or state.context.version is None:
        #     logging.error(f'Cannot publish run as it is generated by an unpublished context')
        #     return False

        zip_file = package_module(state, self.package_path)
        print(zip_file)
        self.module_id = save_module(self.schema_name,
                                     self.module_id,
                                     self.version,
                                     public,
                                     zip_file,
                                     'run_version',
                                     'run.zip')
        return self.module_id is not None

    def __str__(self):
        return self.__getstate__().__str__()
        # string = ''
        #
        # string += '-' * 80 + '\n'
        #
        # string += f'Task: {self.task}' + '\n\n'
        #
        # string += f'Dataset: {self.dataset.name}' + '\n'
        # string += f'Model: {self.model.name}' + '\n'
        #
        # string += '\nMetrics:' + '\n'
        # for metric in self.metrics:
        #     string += f'    {metric.name}: {metric.output["score"]}' + '\n'
        #
        # string += '-' * 80
        #
        # return string
