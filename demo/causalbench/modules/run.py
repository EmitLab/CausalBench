import logging

from causalbench.modules.module import Module
from causalbench.services.requests import save_run


class Run(Module):

    def __init__(self, module_id: int = None):
        super().__init__(module_id, None, None, 'run')

    def validate(self):
        # TODO: To be implemented
        pass

    def fetch(self, module_id: int) -> str:
        # TODO: To be implemented
        pass

    def save(self, state: dict) -> bool:
        if state.pipeline.id is None:
            logging.error(f'Cannot publish run as it is generated by an unpublished pipeline')
            return False

        self.module_id = save_run(self)
        return self.module_id is not None

    def __str__(self):
        string = ''

        string += '-' * 80 + '\n'

        string += f'Task: {self.pipeline.task}' + '\n'
        string += f'Dataset: {self.dataset.name}' + '\n'
        string += f'Model: {self.model.name}' + '\n'

        string += '\nMetrics:' + '\n'
        for metric in self.metrics:
            string += f'    {metric.name}: {metric.output.score}' + '\n'

        string += '-' * 80

        return string
